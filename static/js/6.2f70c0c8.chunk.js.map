{"version":3,"sources":["utils/validators/validators.js","components/common/formsControls/formsControls.js","components/common/formsControls/formsControls.module.css","components/Login/login.module.css","components/Login/Login.jsx"],"names":["requiredField","value","maxLengthCreator","maxLength","length","Textarea","input","meta","props","hasError","touched","error","className","css","formControl","Input","module","exports","maxLength10","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","placeholder","name","component","validate","type","formError","connect","state","isAuth","auth","login","to","formData","console","log","email","Password","rememberMe"],"mappings":"gGACA,oEACO,IAAMA,EAAgB,SAAAC,GACzB,IAAGA,EACH,MAAO,sGAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,EAAMG,OAAOD,EAAW,MAAM,sGAAN,OAA6BA,EAA7B,wD,oJCJlBE,EAAW,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAC3CC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,yBAAKC,UAAWC,IAAIC,aAAeL,EAAS,IAAII,IAAIF,MAAM,KACtD,6BAEI,8CAAcL,EAAWE,KAE5BC,GAAY,8BAAOF,EAAKI,SAKxBI,EAAQ,SAAC,GAA6B,IAA5BT,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCACxCC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,yBAAKC,UAAWC,IAAIC,aAAeL,EAAS,IAAII,IAAIF,MAAM,KACtD,6BAEI,2CAAWL,EAAWE,KAEzBC,GAAY,8BAAOF,EAAKI,U,oBCzBrCK,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,2B,iCCD9B,yGASMC,EAAchB,YAAiB,IAyC/BiB,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EAlCL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcX,EAAW,EAAXA,MAC9B,OACI,0BAAMY,SAAUD,GACZ,6BAGI,kBAAC,IAAD,CAAOE,YAAa,QAASC,KAAM,QAASC,UAAWX,IACnDY,SAAU,CAAC3B,IAAekB,MAGlC,6BAEI,kBAAC,IAAD,CAAOM,YAAa,WAAYC,KAAM,WAAYG,KAAM,WAAYF,UAAWX,IAC3EY,SAAU,CAAC3B,IAAekB,MAElC,6BAEI,kBAAC,IAAD,CAAOU,KAAM,WAAYH,KAAM,aAAcC,UAAW,UAF5D,gBAICf,GACG,yBAAKC,UAAWC,IAAIgB,WACflB,GAGT,6BACI,8CAyCDmB,uBARS,SAACC,GAAD,MACpB,CACIC,OAAQD,EAAME,KAAKD,UAMa,CAACE,WAA1BJ,EA9BD,SAACtB,GASX,OAAGA,EAAMwB,OACE,kBAAC,IAAD,CAAUG,GAAI,aAIrB,yBAAKvB,UAAW,SACZ,qCACA,kBAACO,EAAD,CAAgBI,SAbP,SAACa,GACdC,QAAQC,IAAIF,GAEZ5B,EAAM0B,MAAME,EAASG,MAAOH,EAASI,SAAUJ,EAASK","file":"static/js/6.2f70c0c8.chunk.js","sourcesContent":["\r\n// requiredField - поле, обязательное для заполнения\r\nexport const requiredField = value => {\r\n    if(value) return undefined;\r\n    return 'Обязательное поле!';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length>maxLength) return `Не может привышать ${maxLength} символов`;\r\n    return undefined;\r\n}\r\n","import React from 'react';\r\nimport css from './formsControls.module.css';\r\n\r\n\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={css.formControl + (hasError?' '+css.error:'')}>\r\n            <div>\r\n                {/* Почему ...input см. в документации к redux-form */}\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={css.formControl + (hasError?' '+css.error:'')}>\r\n            <div>\r\n                {/* Почему ...input см. в документации к redux-form */}\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formsControls_formControl__1li7W\",\"error\":\"formsControls_error__3s6AV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formError\":\"login_formError__3rhQM\"};","import React from 'react';\r\nimport {reduxForm, Field} from 'redux-form';\r\nimport { Input } from '../common/formsControls/formsControls';\r\nimport { requiredField, maxLengthCreator } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../Redux/authReducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport css from './login.module.css';\r\n\r\nconst maxLength10 = maxLengthCreator(30);\r\n\r\n\r\n\r\n\r\n// Можно использовать деструктуризаию {handleSubmit, error},\r\n// чтобы постоянно не писать props.handleSubmit и props.error\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {/* <input placeholder={'Login'} /> */}\r\n                {/* Вместо input используем Field - Это типа контейнерный компонент */}\r\n                <Field placeholder={'email'} name={'email'} component={Input}\r\n                    validate={[requiredField, maxLength10]} />\r\n                \r\n            </div>\r\n            <div>\r\n                {/* <input placeholder={'Password'} /> */}\r\n                <Field placeholder={'Password'} name={'Password'} type={'password'} component={Input}\r\n                    validate={[requiredField, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                {/* <input type={'checkbox'} /> remember me */}\r\n                <Field type={'checkbox'} name={'rememberMe'} component={'input'} /> remember me\r\n            </div>\r\n            {error &&\r\n                <div className={css.formError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n\r\n// { form: 'login' } это уникальное имя формы, так как форм может быть много\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nconst Login = (props) => {\r\n\r\n    // Необходимо передать эту функцию в HOC\r\n    const onSubmit = (formData) => {\r\n        console.log(formData);\r\n        \r\n        props.login(formData.email, formData.Password, formData.rememberMe);\r\n    }\r\n     \r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={'login'}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => (\r\n    {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n    \r\n)\r\n\r\n// Коннектом прокидываем null и Login в компонент Login\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}